# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from learning_communication/bianshi.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class bianshi(genpy.Message):
  _md5sum = "8ef0f20add1753e4de26579161d3d529"
  _type = "learning_communication/bianshi"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 g
float64 fx
float64 fy
float64 fz
float64 tx
float64 ty
float64 tz
float64 x
float64 y
float64 px
float64 py
float64 pz

"""
  __slots__ = ['g','fx','fy','fz','tx','ty','tz','x','y','px','py','pz']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       g,fx,fy,fz,tx,ty,tz,x,y,px,py,pz

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(bianshi, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.g is None:
        self.g = 0.
      if self.fx is None:
        self.fx = 0.
      if self.fy is None:
        self.fy = 0.
      if self.fz is None:
        self.fz = 0.
      if self.tx is None:
        self.tx = 0.
      if self.ty is None:
        self.ty = 0.
      if self.tz is None:
        self.tz = 0.
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.px is None:
        self.px = 0.
      if self.py is None:
        self.py = 0.
      if self.pz is None:
        self.pz = 0.
    else:
      self.g = 0.
      self.fx = 0.
      self.fy = 0.
      self.fz = 0.
      self.tx = 0.
      self.ty = 0.
      self.tz = 0.
      self.x = 0.
      self.y = 0.
      self.px = 0.
      self.py = 0.
      self.pz = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12d().pack(_x.g, _x.fx, _x.fy, _x.fz, _x.tx, _x.ty, _x.tz, _x.x, _x.y, _x.px, _x.py, _x.pz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 96
      (_x.g, _x.fx, _x.fy, _x.fz, _x.tx, _x.ty, _x.tz, _x.x, _x.y, _x.px, _x.py, _x.pz,) = _get_struct_12d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12d().pack(_x.g, _x.fx, _x.fy, _x.fz, _x.tx, _x.ty, _x.tz, _x.x, _x.y, _x.px, _x.py, _x.pz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 96
      (_x.g, _x.fx, _x.fy, _x.fz, _x.tx, _x.ty, _x.tz, _x.x, _x.y, _x.px, _x.py, _x.pz,) = _get_struct_12d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12d = None
def _get_struct_12d():
    global _struct_12d
    if _struct_12d is None:
        _struct_12d = struct.Struct("<12d")
    return _struct_12d
